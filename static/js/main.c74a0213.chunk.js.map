{"version":3,"sources":["logo.svg","SplitTest.js","LDTest.js","App.js","reportWebVitals.js","index.js"],"names":["SplitTest","event","React","useState","splitClient","setSplitClient","splitManager","setSplitManager","eventFeatureEnabled","setEventFeatureEnabled","useEffect","factory","SplitFactory","core","authorizationKey","key","trafficType","startup","readyTimeout","client","manager","once","Event","SDK_READY","on","userObject","account","email","allFlags","splits","allFlagNames","names","console","log","isFeatureOn","getTreatment","style","border","margin","LDTest","ldClient","setLdClient","newFeatureEnabled","setNewFeatureEnabled","user","name","custom","eventId","accountId","LDClient","variation","events","App","setEvent","splitState","setSplitState","ldState","setLdState","className","src","logo","alt","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAAe,MAA0B,iC,uBC4D1BA,EAvDG,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEnB,EAAsCC,IAAMC,SAAS,MAArD,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAwCH,IAAMC,SAAS,MAAvD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAsDL,IAAMC,UAAS,GAArE,mBAAOK,EAAP,KAA4BC,EAA5B,KA0CA,OAxCAP,IAAMQ,WAAU,WACd,IAAMC,EAAUC,YAAa,CAC3BC,KAAM,CACJC,iBAAkB,uCAClBC,IAAKd,EACLe,YAAa,SAEfC,QAAS,CACPC,aAAc,OAIZC,EAASR,EAAQQ,SACjBC,EAAUT,EAAQS,UACxBA,EAAQC,KAAKD,EAAQE,MAAMC,WAAW,WACpChB,EAAgBa,MAGlBD,EAAOK,GAAGL,EAAOG,MAAMC,WAAW,WAChClB,EAAec,QAEhB,CAAClB,IAEJC,IAAMQ,WAAU,WACd,IAAMe,EAAa,CACjBC,QAAQ,GAAD,OAAKzB,EAAL,OACP0B,MAAM,GAAD,OAAK1B,EAAL,gBACLA,MAAOA,GAGH2B,EAAWtB,GAAgBA,EAAauB,SACxCC,EAAexB,GAAgBA,EAAayB,QAClDC,QAAQC,IAAIL,EAAUE,GAEtB,IAAMI,EAAc9B,GAAeA,EAAY+B,aAAa,eAAgBV,GAC5EhB,EAAuC,OAAhByB,KAEtB,CAACjC,EAAOG,EAAaE,IAGjB,sBAAK8B,MAAO,CAAEC,OAAQ,kBAAmBC,OAAQ,QAAjD,UACL,uDACA,oDACiB,uCAAW9B,EAAsB,KAAO,MAAxC,OADjB,gBACyFP,S,QCR9EsC,EAxCA,SAAC,GAAe,IAAbtC,EAAY,EAAZA,MAEhB,EAAgCC,IAAMC,SAAS,MAA/C,mBAAOqC,EAAP,KAAiBC,EAAjB,KACA,EAAkDvC,IAAMC,UAAS,GAAjE,mBAAOuC,EAAP,KAA0BC,EAA1B,KA4BA,OA1BAzC,IAAMQ,WAAU,WACd,IAAMkC,EAAO,CACX7B,IAAKd,EACL4C,KAAK,WAAD,OAAa5C,GACjB0B,MAAM,GAAD,OAAK1B,EAAL,gBACL6C,OAAQ,CACJC,QAAS9C,EACT+C,UAAU,GAAD,OAAK/C,EAAL,SAMTkB,EAAS8B,IAAoB,2BAA4BL,GAE/DzB,EAAOK,GAAG,SAAS,WACjBiB,EAAYtB,GACZ,IAAMS,EAAWT,EAAOS,WACxBI,QAAQC,IAAI,gBAAiBL,QAE9B,CAAC3B,IAEJC,IAAMQ,WAAU,WACdiC,EAAqBH,GAAYA,EAASU,UA9B3B,kBA+Bd,CAACV,IAEG,sBAAKJ,MAAO,CAAEC,OAAQ,kBAAmBC,OAAQ,QAAjD,UACL,2DACA,kDACiB,uCAAUI,EAAoB,KAAO,MAArC,OADjB,eACoFzC,SC/BlFkD,EACC,MADDA,EAEC,MAFDA,EAGC,MA0DQC,MAvDf,WAEE,MAA0BlD,IAAMC,SAASgD,GAAzC,mBAAOlD,EAAP,KAAcoD,EAAd,KACA,EAAoCnD,IAAMC,UAAS,GAAnD,mBAAOmD,EAAP,KAAmBC,EAAnB,KACA,EAA8BrD,IAAMC,UAAS,GAA7C,mBAAOqD,EAAP,KAAgBC,EAAhB,KAEA,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,WAG3C,gCACE,gCACE,wBACEC,QAAS,kBAAMP,GAAeD,IADhC,mBAIF,wBACIQ,QAAS,kBAAML,GAAYD,IAD/B,8BAKA,gCACE,yBACEM,QAAS,kBAAMT,EAASF,IAD1B,mBAESA,KAET,yBACEW,QAAS,kBAAMT,EAASF,IAD1B,mBAESA,KAET,yBACEW,QAAS,kBAAMT,EAASF,IAD1B,mBAESA,QAGX,4CACYlD,KAEZ,8CACcA,EADd,SAGA,0CACUA,EADV,qBAKDqD,GAAc,cAAC,EAAD,CAAWrD,MAAOA,IAChCuD,GAAW,cAAC,EAAD,CAAkBvD,MAAOA,QCpD5B8D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c74a0213.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\n\nimport { SplitFactory } from '@splitsoftware/splitio';\n\n\nconst SplitTest = ({ event }) => {\n\n  const [splitClient, setSplitClient] = React.useState(null);\n  const [splitManager, setSplitManager] = React.useState(null);\n  const [eventFeatureEnabled, setEventFeatureEnabled] = React.useState(false);\n\n  React.useEffect(() => {\n    const factory = SplitFactory({ \n      core: {\n        authorizationKey: 'in9qidn1upmnq6bi8ffums1tm5lakagp8jn0',\n        key: event,\n        trafficType: 'event'\n      },\n      startup: {\n        readyTimeout: 1.5\n      }\n    });\n    \n    const client = factory.client();\n    const manager = factory.manager();\n    manager.once(manager.Event.SDK_READY, function() {\n      setSplitManager(manager);\n    });\n\n    client.on(client.Event.SDK_READY, () => {\n      setSplitClient(client);\n    });\n  }, [event]);\n\n  React.useEffect(() => {\n    const userObject = {\n      account: `${event}000`,\n      email: `${event}@bizzabo.com`,\n      event: event\n    };\n\n    const allFlags = splitManager && splitManager.splits();\n    const allFlagNames = splitManager && splitManager.names();\n    console.log(allFlags, allFlagNames);\n\n    const isFeatureOn = splitClient && splitClient.getTreatment('eventFeature', userObject);\n    setEventFeatureEnabled(isFeatureOn === 'on');\n\n  }, [event, splitClient, splitManager]);\n\n\n  return <div style={{ border: '1px solid black', margin: '50px' }}>\n    <h1>This is from Split.io</h1>\n    <div>\n    eventFeature is: <strong> { eventFeatureEnabled ? 'on' : 'off' } </strong>  for event: { event }\n    </div>\n  </div>;\n};\n\n\nexport default SplitTest;","import React from 'react';\n\nimport * as LDClient from \"launchdarkly-js-client-sdk\";\n\nconst newFeature = 'new-feature';\n\nconst LDTest = ({ event }) => {\n\n  const [ldClient, setLdClient] = React.useState(null);\n  const [newFeatureEnabled, setNewFeatureEnabled] = React.useState(false);\n\n  React.useEffect(() => {\n    const user = {\n      key: event,\n      name: `user in:${event}`,\n      email: `${event}@bizzabo.com`,\n      custom: {\n          eventId: event,\n          accountId: `${event}000`,\n      }\n    };\n    // const options = {\n    //   bootstrap: {}\n    // };\n    const client = LDClient.initialize('60be2087cafd2b0e04da8ce4', user);\n    \n    client.on('ready', function () {\n      setLdClient(client);\n      const allFlags = client.allFlags();\n      console.log('@@@ all flags', allFlags);\n    });\n  }, [event]);\n    \n  React.useEffect(() => {\n    setNewFeatureEnabled(ldClient && ldClient.variation(newFeature));\n  }, [ldClient]);\n\n  return <div style={{ border: '1px solid black', margin: '50px' }}>\n    <h1>This is from LaunchDarkly</h1>\n    <div>\n      newFeature is: <strong> {newFeatureEnabled ? 'on' : 'off'} </strong> for event: { event }\n    </div>\n  </div>;\n};\n\n\nexport default LDTest;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// import RoxTest from './RoxTest';\n// import FlagsmithTest from './FlagsmithTest';\nimport SplitTest from './SplitTest';\nimport LaunchDarklyTest from './LDTest';\n\nconst events = {\n  123: '123',\n  456: '456',\n  789: '789'\n}\n\nfunction App() {\n\n  const [event, setEvent] = React.useState(events[123]);\n  const [splitState, setSplitState] = React.useState(false);\n  const [ldState, setLdState] = React.useState(false);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n\n      <nav>\n        <div>\n          <button\n            onClick={() => setSplitState(!splitState)}>\n            SPLIT\n        </button>\n        <button\n            onClick={() => setLdState(!ldState)}>\n            Launch Darkly\n        </button>\n        </div>\n        <div>\n          <button\n            onClick={() => setEvent(events[123])}>\n            Event {events[123]}\n          </button> \n          <button\n            onClick={() => setEvent(events[456])}>\n            Event {events[456]}\n          </button> \n          <button\n            onClick={() => setEvent(events[789])}>\n            Event {events[789]}\n          </button>\n        </div>\n        <div>\n          eventId: {event}\n        </div>\n        <div>\n          accountId: {event}000\n        </div>\n        <div>\n          email: {event}@bizzabo.com\n        </div>\n      </nav>\n\n      {splitState && <SplitTest event={event} />}\n      {ldState && <LaunchDarklyTest event={event} />}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}