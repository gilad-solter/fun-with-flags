{"version":3,"sources":["logo.svg","RoxTest.js","SplitTest.js","LaunchDarklyTest.js","App.js","reportWebVitals.js","index.js"],"names":["Rox","SplitTest","React","useState","splitClient","setSplitClient","accountFeatureEnabled","setAccountFeatureEnabled","useEffect","client","SplitFactory","core","authorizationKey","key","startup","readyTimeout","on","Event","SDK_READY","getTreatment","account","email","event","style","border","margin","LaunchDarklyTestWrapper","withLDProvider","clientSideID","user","custom","eventId","accountId","InnerComponenetWrapper","withLDConsumer","flags","newFeature","App","className","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAAe,G,MAAA,IAA0B,kC,0CCIrB,IAAIA,OACP,IAAIA,OACJ,IAAIA,YAAc,QAAS,CAAC,QAAS,OAAQ,QAAS,WACxD,IAAIA,YAAc,GAAI,CAAC,GAAI,GAAI,GAAI,K,kBCyCnCC,EA3CG,WAEhB,MAAsCC,IAAMC,SAAS,MAArD,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA0DH,IAAMC,UAAS,GAAzE,mBAAOG,EAAP,KAA8BC,EAA9B,KA+BA,OA7BEL,IAAMM,WAAU,WACZ,IAUMC,EAVUC,YAAa,CAC3BC,KAAM,CACJC,iBAAkB,uCAClBC,IAAK,UAEPC,QAAS,CACPC,aAAc,OAIKN,SAEvBA,EAAOO,GAAGP,EAAOQ,MAAMC,WAAW,WAChCb,EAAeI,QAEhB,IAEHP,IAAMM,WAAU,WAOdD,EAAyBH,GAAeA,EAAYe,aAAa,iBAN9C,CACjBC,QAAS,SACTC,MAAO,oBACPC,MAAO,WAKR,CAAClB,IAED,sBAAKmB,MAAO,CAAEC,OAAQ,kBAAmBC,OAAQ,QAAjD,UACL,uDACA,sDACuBnB,EAAwB,KAAO,a,QC1BpDoB,EAA0BC,yBAAe,CAC3CC,aAAc,2BACdC,KAAM,CACF,IAhBQ,MAiBR,KAAQ,mBACR,MAAS,sBACTC,OAAQ,CACJC,QAAS,MACTC,UAAW,SARSL,EAXP,WAGrB,OAAO,sBAAKJ,MAAO,CAAEC,OAAQ,kBAAmBC,OAAQ,QAAjD,UACH,+DAGA,cAACQ,EAAD,UA4BFA,EAAyBC,4BAVP,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEvB,OAAO,wCA7BK,MA6BL,IACc,uBADd,kBAGFA,EAAMC,WAAa,MAAQ,aAOrBV,IChBAW,MAjBf,WAEE,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,WAK3C,cAAC,EAAD,IACA,cAAC,EAAD,QCRSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.aa690856.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport * as Rox from 'rox-browser';\n\nconst flagsInitial = {\n    enableTutorial: new Rox.Flag(),\n    aNewFeature: new Rox.Flag(),\n    titleColors: new Rox.RoxString('White', ['White', 'Blue', 'Green', 'Yellow']),\n    titleSize: new Rox.RoxNumber(12, [12, 14, 18, 24])\n};\n\nexport default function RoxTest() {\n    \n    const [flags, setFlags] = React.useState(null);\n\n    React.useEffect(() => {\n        async function initRollout() {\n            const options = {}          \n            // // Register the flags with Rollout\n            Rox.register('', flagsInitial);\n            Rox.setCustomStringProperty('accountId', '123');\n          \n            // Setup the Rollout key\n            await Rox.setup('60b5f1fc81b922063e523198', options);\n        };\n        \n        initRollout().then(() => {\n            setFlags(flagsInitial);\n        });\n        \n    }, []);\n    \n    React.useEffect(() => {\n        console.log('@@@ aNewFeature flag is: ', flags?.aNewFeature?.isEnabled());\n    },[flags]);\n\n\n    return <div>\n\n        <div>\n            \n        </div>\n\n        <h3>\n            This is the second component\n        </h3>\n    </div>\n}","import React from 'react';\n\nimport { SplitFactory } from '@splitsoftware/splitio';\n\n\nconst SplitTest = () => {\n\n  const [splitClient, setSplitClient] = React.useState(null);\n  const [accountFeatureEnabled, setAccountFeatureEnabled] = React.useState(false);\n\n    React.useEffect(() => {\n        const factory = SplitFactory({ \n          core: {\n            authorizationKey: 'in9qidn1upmnq6bi8ffums1tm5lakagp8jn0',\n            key: '123456'\n          },\n          startup: {\n            readyTimeout: 1.5\n          }\n        });\n        \n        const client = factory.client();\n    \n        client.on(client.Event.SDK_READY, () => {\n          setSplitClient(client);\n        });\n      }, []);\n    \n      React.useEffect(() => {\n        const userObject = {\n          account: '123456',\n          email: 'gilad@bizzabo.com',\n          event: '456'\n        };\n    \n        setAccountFeatureEnabled(splitClient && splitClient.getTreatment('accountFeature', userObject));\n    \n      }, [splitClient]);\n\n  return <div style={{ border: '1px solid black', margin: '50px' }}>\n    <h1>This is from Split.io</h1>\n    <div>\n      accountFeature is: { accountFeatureEnabled ? 'on' : 'off' }\n    </div>\n  </div>;\n};\n\n\nexport default SplitTest;","import React from 'react';\nimport { withLDProvider, withLDConsumer } from 'launchdarkly-react-client-sdk';\n\nconst userKey = '789';\n\nconst LaunchDarklyTest = () => {\n    \n    \n    return <div style={{ border: '1px solid black', margin: '50px' }}>\n        <h1>\n            This is Launch Darkly wrapper\n        </h1>\n        <InnerComponenetWrapper />    \n    </div>\n};\n\nconst LaunchDarklyTestWrapper = withLDProvider({\n    clientSideID: '60be2087cafd2b0e04da8ce4',\n    user: {\n        'key': userKey,\n        'name': 'Shlomtzion Queen',\n        'email': 'gilad+1@bizzabo.com',\n        custom: {\n            eventId: '999',\n            accountId: '666',\n        }\n    }\n})(LaunchDarklyTest);\n\n\nconst InnerComponenet = ({ flags }) => {\n    \n    return <div>\n        key: { userKey } <br/>\n        new-feature is:\n        {flags.newFeature ? ' on' : ' off'}\n    </div>;\n    \n};\n\nconst InnerComponenetWrapper = withLDConsumer()(InnerComponenet);\n\nexport default LaunchDarklyTestWrapper;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport RoxTest from './RoxTest';\nimport FlagsmithTest from './FlagsmithTest';\nimport SplitTest from './SplitTest';\nimport LaunchDarklyTest from './LaunchDarklyTest';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n\n      {/* <RoxTest />      \n      <FlagsmithTest /> */}\n      <SplitTest />\n      <LaunchDarklyTest />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}